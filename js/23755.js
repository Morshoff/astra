// This file was generated by Slater.app - globalgsap.js 


gsap.registerPlugin(ScrollTrigger);

/////////////////////LOAD IN ANIMATION//////////////////////////

const loadInHomeTitle = document.querySelectorAll('[home-h1]');
const loadInHomeP = document.querySelectorAll(".home-hero_p");
let loadIn = gsap.timeline();
loadIn.from('[load-in-gradient]', {
    /*scale: 0.25, */
    autoAlpha: 0,
    ease: "power4.out",
    duration: .5
  })
  .from('[load-in-logo-div]', {
    scale: 0.5,
    autoAlpha: 0,
    ease: "power4.out",
    duration: 1
  }, "-=0.2")
  .from(".load-in_logo-letter", {
    yPercent: 100,
    duration: 1,
    ease: "expo.out",
    stagger: { each: 0.05 }
  })
  .to(".load-in_logo-letter", {
    yPercent: -100,
    duration: 1,
    ease: "expo.inOut",
    stagger: { each: 0.05 }
  }, "+=0.2")
  .to('[load-in-div]', {
    yPercent: -100,
    duration: 1.5,
    ease: "power4.inOut"
  })




/////////////////////////////////////////////////////////////////////////

/////////////////////SCROLL ANIMATIONS FOR TEXT//////////////////////////

function createScrollTrigger(triggerElement, timeline, startPercentage) {
  // Reset tl when scroll out of view past bottom of screen
  ScrollTrigger.create({
    trigger: triggerElement,
    start: "top bottom",
    onLeaveBack: () => {
      timeline.progress(0);
      timeline.pause();
    }
  });

  // Play tl when scrolled into view at the specified percentage
  ScrollTrigger.create({
    trigger: triggerElement,
    start: `top ${startPercentage}%`,
    onEnter: () => timeline.play()
  });
}

const lettersSlideUp = document.querySelectorAll('[letters-slide-up]');

lettersSlideUp.forEach((element) => {
  // Iterate through each element and apply SplitType
  const splitType = new SplitType(element);

  let tl = gsap.timeline({ paused: true });
  tl.from(splitType.chars, {
    yPercent: 125,
    duration: 0.6,
    ease: "power1.out",
    stagger: { amount: 0.5 }
  });
  createScrollTrigger(element, tl, 85);
});

/////////////////////////////////////////////////////////////////////////

///////////////////ELEMENTS MOVE BASED ON MOUSE POSITION////////////////

const elementsMoveInverse = document.querySelectorAll('[move-w-mouse-inverse]');

// Function to handle inverse mouse movement
function animateMoveInverse(event) {
  const xPercent = (event.clientX / window.innerWidth) * 2 - 1;
  const yPercent = (event.clientY / window.innerHeight) * 2 - 1;

  elementsMoveInverse.forEach(element => {

    gsap.to(element, {
      x: xPercent * -15, // Inverse x-axis motion
      y: yPercent * -15, // Inverse y-axis motion
      ease: "power1.out",
      duration: 0.2
    });
  });

}

const elementsMove = document.querySelectorAll('[move-w-mouse]');

// Function to handle regular mouse movement
function animateMove(event) {
  const xPercent = (event.clientX / window.innerWidth) * 2 - 1;
  const yPercent = (event.clientY / window.innerHeight) * 2 - 1;

  elementsMove.forEach(element => {
    gsap.to(element, {
      x: xPercent * 15,
      y: yPercent * 15,
      ease: "power1.out",
      duration: 0.2
    });
  });
}

const elementsMoveSmall = document.querySelectorAll('[move-w-mouse-small]');

// Function to handle regular mouse movement
function animateMoveSmall(event) {
  const xPercent = (event.clientX / window.innerWidth) * 2 - 1;
  const yPercent = (event.clientY / window.innerHeight) * 2 - 1;

  elementsMoveSmall.forEach(element => {
    gsap.to(element, {
      x: xPercent * 3,
      y: yPercent * 3,
      ease: "power1.out",
      duration: 0.2
    });
  });
}

// Select elements with attribute [move-w-mouse-small]
const elementsMoveInverseSmall = document.querySelectorAll('[move-w-mouse-inverse-small]');

// Function to handle regular mouse movement
function animateMoveInverseSmall(event) {
  const xPercent = (event.clientX / window.innerWidth) * 2 - 1;
  const yPercent = (event.clientY / window.innerHeight) * 2 - 1;

  elementsMoveInverseSmall.forEach(element => {
    gsap.to(element, {
      x: xPercent * -3,
      y: yPercent * -3,
      ease: "power1.out",
      duration: 0.2
    });
  });
}

// Single event listener calling both functions
function handleMouseMove(event) {
  animateMoveInverse(event);
  animateMove(event);
  animateMoveSmall(event);
  animateMoveInverseSmall(event);
}

window.addEventListener("mousemove", handleMouseMove);

////////////////////////////////////////////////////////////////////////

///////////////////////GROW IN ON SCROLL////////////////////////////////

// Select elements with attribute [grow-on-scroll]
const growOnScrollElements = document.querySelectorAll('[grow-on-scroll]');

// Loop through each element and create a ScrollTrigger animation
growOnScrollElements.forEach(element => {
  gsap.from(element, {
    scale: 0.5, // Start smaller
    autoAlpha: 0, // Start invisible
    duration: 1, // Duration of the animation
    ease: "power2.out",
    scrollTrigger: {
      trigger: element,
      start: "top 85%", // 15% from the bottom of the viewport
      /*toggleActions: "play none none reverse",*/ // Play when entering, reverse on leaving
    }
  });
});

////////////////////////////////////////////////////////////////////////

//////////////////////////Magnet Effect/////////////////////////////////
const elementsMagnet = document.querySelectorAll('[magnet]');

// Function to handle mouse movement on hover
function animateMagnet(event, element) {
  // Get element's bounding box to calculate the center
  const rect = element.getBoundingClientRect();

  // Calculate offset based on the distance between the cursor and element's center
  const xOffset = (event.clientX - (rect.left + rect.width / 2)) * 0.1;
  const yOffset = (event.clientY - (rect.top + rect.height / 2)) * 0.1;

  gsap.to(element, {
    x: xOffset,
    y: yOffset,
    ease: "power1.out",
    duration: 0.1 // Faster duration for a more magnetic feel
  });
}

// Add event listeners to each element
elementsMagnet.forEach(element => {
  // Mouse move handler specifically for this element
  const onMouseMove = (event) => animateMagnet(event, element);

  // Start tracking mouse movement when hovering
  element.addEventListener('mouseenter', () => {
    window.addEventListener('mousemove', onMouseMove);
  });

  // Stop tracking mouse movement when no longer hovering
  element.addEventListener('mouseleave', () => {
    window.removeEventListener('mousemove', onMouseMove);
    // Reset position smoothly when hover ends
    gsap.to(element, { x: 0, y: 0, duration: 0.2, ease: "power1.out" });
  });
});

////////////////////////////////////////////////////////////////////////


